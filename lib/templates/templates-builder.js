'use strict';

/**
 * Attributes, generated by random.
 * Must be removed from the generated static html-page for correct testing of distributives in platform tests.
 * https://online.sbis.ru/opendoc.html?guid=2b25dbee-be00-4c07-b101-db3af72c80b0
 */
const TEST_ATTRS = ['config'];

/**
 * Class with main functions and parameters for platform templates
 * constructor that's generating .html.tmpl/.wml/.tmpl files.
 * @author Kolbeshin F.A.
 */
class TemplatesBuilder {
   constructor() {
      // common template's constructor functions. Null by default
      this.CompilerLib = null;
      this.ViewBuilderTmpl = null;
      this.ViewConfig = null;
      this.Compiler = null;

      // common wsConfig params. Null by default.
      this.appRoot = null;
      this.wsRoot = null;
      this.resourceRoot = null;
      this.RUMEnabled = null;
      this.pageName = null;
      this.servicesPath = null;
      this.product = null;
   }

   // requires basic platform needed by .wml/.tmpl/.html.tmpl compiler.
   requireView() {
      if (!this.appInit) {
         this.appInit = global.requirejs('Application/Initializer');
         this.appInit.default();
      }
      if (!this.CompilerLib) {
         this.CompilerLib = global.requirejs('Compiler/Compiler');

         this.ViewBuilderTmpl = this.CompilerLib.Tmpl;
         this.ViewConfig = this.CompilerLib.Config;
         this.Compiler = this.CompilerLib.Compiler;
      }
   }

   async render(_options) {
      const html = await new Promise((resolve, reject) => {
         global.requirejs(['Application/State', 'UI/State', 'Router/Builder'], (AppState, UIState, Builder) => {
            const config = {
               servicesPath: this.servicesPath,
               resourceRoot: this.resourceRoot,
               metaRoot: this.metaRoot,
               application: '',
               RUMEnabled: this.RUMEnabled,
               pageName: this.pageName,
               appRoot: this.appRoot,
               wsRoot: this.wsRoot,
               product: this.product
            };
            const fakeReq = {};
            const fakeRes = {};
            try {
               this.appInit.startRequest(config, new AppState.StateReceiver(UIState.Serializer),
                  () => fakeReq, () => fakeRes);
               resolve(Builder.renderStatic({ ...config, ..._options }));
            } catch (e) {
               reject(e);
            }
         }, reject);
      });
      return removeHtmlAttrs(html, TEST_ATTRS);
   }

   setCommonRootInfo(serviceConfig) {
      /**
       * In case of presentation service usage in current project set wsConfig common parameters
       * with special placeholder to be replaced by PS afterwards. Otherwise default meta with
       * application(configured in builder by gulp_config - applicationForRebase) will be used
       */
      if (!this.appRoot) {
         const {
            servicesPath,
            application,
            resourcesUrl,
            multiService
         } = serviceConfig;
         this.appRoot = multiService ? '%{APPLICATION_ROOT}' : application;
         this.wsRoot = multiService ? '%{WI.SBIS_ROOT}' : `${application}${resourcesUrl || ''}WS.Core/`;
         this.resourceRoot = multiService ? '%{RESOURCE_ROOT}' : `${application}${resourcesUrl || ''}`;
         this.metaRoot = multiService ? '%{META_ROOT}' : `${application}${resourcesUrl || ''}`;
         this.RUMEnabled = multiService ? '%{RUM_ENABLED}' : 'false';
         this.pageName = multiService ? '%{PAGE_NAME}' : '';
         this.servicesPath = multiService ? '%{SERVICES_PATH}' : servicesPath;
      }
   }
}

module.exports = TemplatesBuilder;

/**
 * Removes transmitted attributes from html-pages
 * @param {string} html
 * @param {string[]} attrs
 */
function removeHtmlAttrs(html, attrs) {
   return attrs.reduce((prev, attr) => prev.replace(new RegExp(` ${attr}=["|'][^\\s+]+(\\s+[^\\s+])*["|']`, 'gi'), ''), html);
}
